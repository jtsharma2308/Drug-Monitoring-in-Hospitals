/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Location.Location;
import Business.Network.Network;
import Business.Departments.Departments;
import Business.Departments.DoctorDepartment;
import Business.Departments.PharmacistDepartment;
import Business.Departments.Tier1Department;
import Business.Departments.Tier2Department;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SessionWorkRequest;
import Business.WorkQueue.Tier1WorkRequest;
import java.awt.CardLayout;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;

/**
 *
 * @author Jyoti
 */
public class MainJFrame extends javax.swing.JFrame {

    Logger logger = Logger.getLogger(MainJFrame.class);

    /**
     * Creates new form MainJFrame
     */
    private EcoSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();

    public MainJFrame() {
        initComponents();
        system = dB4OUtil.retrieveSystem();

        btnLogout.setEnabled(false);
        logger.debug("Entering Application");
        //logger.info("Logged In");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        container = new javax.swing.JPanel();
        loginContainer = new javax.swing.JPanel();
        txtUserName = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        lblPasswrd = new javax.swing.JLabel();
        image = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblHeading = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnForgotPswd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setBackground(java.awt.Color.blue);
        jSplitPane1.setDividerLocation(40);
        jSplitPane1.setDividerSize(1);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setBackground(new java.awt.Color(164, 185, 218));

        btnLogout.setBackground(java.awt.Color.white);
        btnLogout.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Apps-Dialog-Logout-icon.png"))); // NOI18N
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(1019, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, Short.MAX_VALUE)
        );

        jSplitPane1.setTopComponent(jPanel1);

        container.setLayout(new java.awt.CardLayout());

        loginContainer.setBackground(new java.awt.Color(255, 255, 255));
        loginContainer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(186, 202, 228), 3, true));
        loginContainer.setPreferredSize(new java.awt.Dimension(200, 293));

        txtUserName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        passwordField.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        lblPasswrd.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        lblPasswrd.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblPasswrd.setText("Password");

        image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/login.png"))); // NOI18N

        lblUserName.setBackground(new java.awt.Color(255, 255, 255));
        lblUserName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblUserName.setText("User Name");

        btnLogin.setBackground(java.awt.Color.white);
        btnLogin.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/loginnButton.jpg"))); // NOI18N
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnCancel.setBackground(java.awt.Color.white);
        btnCancel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/cancel.png"))); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblHeading.setBackground(new java.awt.Color(255, 255, 255));
        lblHeading.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("User Login");

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        btnForgotPswd.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnForgotPswd.setText("Forgot Password");
        btnForgotPswd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForgotPswdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginContainerLayout = new javax.swing.GroupLayout(loginContainer);
        loginContainer.setLayout(loginContainerLayout);
        loginContainerLayout.setHorizontalGroup(
            loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(loginContainerLayout.createSequentialGroup()
                .addGroup(loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginContainerLayout.createSequentialGroup()
                        .addGap(431, 431, 431)
                        .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(loginContainerLayout.createSequentialGroup()
                        .addGap(291, 291, 291)
                        .addGroup(loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(loginContainerLayout.createSequentialGroup()
                                .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnLogin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(lblPasswrd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(35, 35, 35)
                                .addGroup(loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(loginContainerLayout.createSequentialGroup()
                                .addGap(264, 264, 264)
                                .addComponent(btnForgotPswd)))))
                .addContainerGap(294, Short.MAX_VALUE))
        );
        loginContainerLayout.setVerticalGroup(
            loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginContainerLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110)
                .addGroup(loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginContainerLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUserName)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPasswrd)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(loginContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(btnForgotPswd)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        container.add(loginContainer, "card2");

        jSplitPane1.setRightComponent(container);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
String time1;
    String time2;

//SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
//Date date1 = format.parse(time1);
//Date date2 = format.parse(time2);
//long difference = date2.getTime() - date1.getTime(); 

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        try {
            // TODO add your handling code here:
            btnLogout.setEnabled(false);
            txtUserName.setEnabled(true);
            passwordField.setEnabled(true);
            btnLogin.setEnabled(true);

            time2 = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
            //System.out.println(time2);

            SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
            Date date1 = format.parse(time1);
            Date date2 = format.parse(time2);
            long difference = date2.getTime() - date1.getTime();

            long diffSeconds = difference / 1000 % 60;
            long diffMinutes = difference / (60 * 1000) % 60;

//            System.out.println(diffMinutes);
//            System.out.println(diffMinutes);
            //System.out.println(userAccount.getPerson().getName() + " has logged in for " + diffMinutes + " minutes " + diffSeconds + " Seconds");
            //userAccount.setLoginDuration(diffMinutes);
            userAccount.getSessionHistory().getSessionList().add(diffMinutes);
            if ((inOrganization instanceof DoctorDepartment) || (inOrganization instanceof PharmacistDepartment)) {

                if (diffMinutes > userAccount.maximumDuration) {
                    sessionWorkQueue(userAccount, diffMinutes);
                    JOptionPane.showMessageDialog(null, "You have been logged in for more than Ideal time");
                }
            }

            txtUserName.setText("");
            passwordField.setText("");

            container.removeAll();
            //JPanel blankJP = new JPanel();

            CardLayout crdLyt = (CardLayout) container.getLayout();
            container.add("loginContainer", loginContainer);
            crdLyt.next(container);
            dB4OUtil.storeSystem(system);
        } catch (ParseException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLogoutActionPerformed
    int wrongCounter = 0;
    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    UserAccount userAccount;

    Location inEnterprise;
    Departments inOrganization;

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        try {
            // TODO add your handling code here:
            // Get user name
            String userName = txtUserName.getText();

            // Get Password
            char[] passwordCharArray = passwordField.getPassword();
            String password = String.valueOf(passwordCharArray);

            InetAddress address = InetAddress.getLocalHost();
            String hostIP = address.getHostAddress();
            // System.out.println(hostIP);

            UserAccount userAcc = findAccountDetailsbyUserName(userName);

            if (userAcc != null) {
                if (userAcc.getWrongCounter() == 3) {
                    JOptionPane.showMessageDialog(null, "Account has been blocked!");

                    logger.debug("-------------");
                    logger.info("Useraccount blocked");

                    defineWorkQueue(userAcc, hostIP, "Multiple entry of wrong username and password");

                    return;

                }

            }

            //Step1: Check in the ssystem user account directory if you have the user
            userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);

            //UserAccount userAccount1 = system.getUserAccountDirectory().authenticateUserName(userName);
            //System.out.println("User details=>"+userAccount1.getUsername());
            inEnterprise = null;
            inOrganization = null;
            if (userAccount == null) {

                //Step2: Go inside each network to check each enterprise
                for (Network network : system.getNetworkList()) {
                    //Step 2-a: Check against each enterprise
                    for (Location enterprise : network.getLocationDirectory().getLocationList()) {
                        userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                        if (userAccount == null) {
                            //Step3: Check against each organization inside that enterprise
                            for (Departments organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                if (userAccount != null) {
                                    inEnterprise = enterprise;
                                    inOrganization = organization;
                                    break;
                                }
                            }
                        } else {
                            inEnterprise = enterprise;
                            break;
                        }
                        if (inOrganization != null) {
                            break;
                        }
                    }
                    if (inEnterprise != null) {
                        break;
                    }
                }
            }

            if (userAccount == null) {

                UserAccount userAc = findAccountDetailsbyUserName(userName);
                if (userAc != null) {
                    wrongCounter++;
                    userAcc.setWrongCounter(wrongCounter);

                }
                JOptionPane.showMessageDialog(null, "Invalid Credentails!");
                return;

            } else {

                wrongCounter = 0;
                userAccount.setWrongCounter(wrongCounter);
                boolean ipFlagNotMatched = true;
                if ((inOrganization instanceof DoctorDepartment) || (inOrganization instanceof PharmacistDepartment)) {
                    logger.debug("---------------");
                    logger.info(userAccount.getUsername() + " Logged In");

                    for (String value : userAccount.getStoredIPAddressDirectory().getIpAddressList()) {
                        if (value.equals(hostIP)) {
                            ipFlagNotMatched = false;
                            // wrongCounter = 0;
                            time1 = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
                            //System.out.println(time1);

                            CardLayout layout = (CardLayout) container.getLayout();
                            container.add("workArea", userAccount.getRole().createWorkArea(container, userAccount, inOrganization, inEnterprise, system));
                            layout.next(container);

                            break;

                        }

                    }

                    if (ipFlagNotMatched) {
                        int reply = JOptionPane.showConfirmDialog(null, "Do you want to save this device for " + userName + " username", "", JOptionPane.YES_NO_OPTION);
                        if (reply == JOptionPane.YES_OPTION) {
                            String userInput = JOptionPane.showInputDialog(null, "Please enter the security PIN");
                            int userInputNumb = Integer.parseInt(userInput);

                            if (userInputNumb == (userAccount.getPin())) {

                                userAccount.getStoredIPAddressDirectory().addIPAddress(hostIP);
                                JOptionPane.showMessageDialog(null, "This device is saved");

                                logger.debug("-------------");
                                logger.info("New IP Address added for " + userAccount.getUsername());

                                // wrongCounter = 0;
                                time1 = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
                                System.out.println(time1);

                                CardLayout layout = (CardLayout) container.getLayout();
                                container.add("workArea", userAccount.getRole().createWorkArea(container, userAccount, inOrganization, inEnterprise, system));
                                layout.next(container);
                            } else {
                                JOptionPane.showMessageDialog(null, "Incorrect PIN!! Your account has been blocked");
                                wrongCounter = 3;
                                logger.debug("-------------");
                                logger.info("Useraccount blocked");

                                txtUserName.setText("");
                                passwordField.setText("");

                                defineWorkQueue(userAcc, hostIP, "Unknown device and incorrect security pin");

                                return;
                            }

                        } else {
                            txtUserName.setText("");
                            passwordField.setText("");
                            return;
                        }

                    }

                } else {

                    wrongCounter = 0;

                    time1 = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
                    System.out.println(time1);

                    CardLayout layout = (CardLayout) container.getLayout();
                    container.add("workArea", userAccount.getRole().createWorkArea(container, userAccount, inOrganization, inEnterprise, system));
                    layout.next(container);

                }
            }
            btnLogin.setEnabled(false);
            btnLogout.setEnabled(true);
            txtUserName.setEnabled(false);
            passwordField.setEnabled(false);
        } catch (UnknownHostException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        txtUserName.setEnabled(true);
        passwordField.setEnabled(true);
        btnLogin.setEnabled(true);

        txtUserName.setText("");
        passwordField.setText("");
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnForgotPswdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForgotPswdActionPerformed
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog(null, "Please enter your Username");
        UserAccount user = findAccountDetailsbyUserName(input);
        if (user != null) {
            ForgotPasswordJPanel forgotPasswordJPanel = new ForgotPasswordJPanel(container, user);
            container.add("forgotPasswordJPanel", forgotPasswordJPanel);
            CardLayout layout = (CardLayout) container.getLayout();
            layout.next(container);
        } else {
            if (input == null) {
                JOptionPane.showMessageDialog(null, "Enter Username");
            } else {
                JOptionPane.showMessageDialog(null, "No such username exist");
            }

        }

    }//GEN-LAST:event_btnForgotPswdActionPerformed

    private UserAccount findAccountDetailsbyUserName(String input) {
        UserAccount user = null;

        //Step2: Go inside each network to check each enterprise
        for (Network network : system.getNetworkList()) {
            //Step 2-a: Check against each enterprise
            for (Location enterprise : network.getLocationDirectory().getLocationList()) {
                user = enterprise.getUserAccountDirectory().authenticateUserName(input);
                if (user == null) {
                    //Step3: Check against each organization inside that enterprise
                    for (Departments organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        user = organization.getUserAccountDirectory().authenticateUserName(input);
                        if (user != null) {
                            break;
                        }

                    }
                    break;

                }

            }

            break;
        }
        return user;

    }

    private void sessionWorkQueue(UserAccount user, long lastLoginDuration) {

        SessionWorkRequest sessionWorkRequest = new SessionWorkRequest();
        sessionWorkRequest.setUser(user);
        sessionWorkRequest.setLastUserLogin(lastLoginDuration);
        //tier1WorkRequest.setStatus(status);

        Departments org = null;

        for (Network network : system.getNetworkList()) {
            //Step 2-a: Check against each enterprise
            for (Location enterprise : network.getLocationDirectory().getLocationList()) {
                for (Departments organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof Tier2Department) {
                        org = organization;
                        //System.out.println(organization);
                        break;
                    }
                }
                break;
            }
        }
        if (org != null) {
//            if (!(tier1WorkRequest.getUser()).equals(user)
//                    && !(tier1WorkRequest.getStatus()).equals(status)
//                    /*&& !(tier1WorkRequest.getWorkProgress()).equalsIgnoreCase("unlocked")*/) {
            org.getWorkQueue().getWorkRequestList().add(sessionWorkRequest);
            //userAccount.getWorkQueue().getWorkRequestList().add(tier1WorkRequest);
//            }
        }
    }

    private void defineWorkQueue(UserAccount user, String hostIp, String status) {

        Tier1WorkRequest tier1WorkRequest = new Tier1WorkRequest();
        tier1WorkRequest.setUser(user);
        tier1WorkRequest.setIpAddress(hostIp);
        tier1WorkRequest.setStatus(status);

        Departments org = null;

        for (Network network : system.getNetworkList()) {
            //Step 2-a: Check against each enterprise
            for (Location enterprise : network.getLocationDirectory().getLocationList()) {
                for (Departments organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof Tier1Department) {
                        org = organization;
                        //System.out.println(organization);
                        break;
                    }
                }
                break;
            }
        }
        if (org != null) {
//            if (!(tier1WorkRequest.getUser()).equals(user)
//                    && !(tier1WorkRequest.getStatus()).equals(status)
//                    /*&& !(tier1WorkRequest.getWorkProgress()).equalsIgnoreCase("unlocked")*/) {
            org.getWorkQueue().getWorkRequestList().add(tier1WorkRequest);
            //userAccount.getWorkQueue().getWorkRequestList().add(tier1WorkRequest);
//            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnForgotPswd;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JPanel container;
    private javax.swing.JLabel image;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblPasswrd;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JPanel loginContainer;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
