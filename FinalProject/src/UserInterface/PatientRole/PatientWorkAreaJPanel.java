/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientRole;

import Business.Departments.Departments;
import Business.Departments.DoctorDepartment;
import Business.Departments.PatientDepartment;
import Business.Location.Location;
import Business.Prescription.Prescription;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;

/**
 *
 * @author Jyoti
 */
public class PatientWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientWorkAreaJPanel
     */
    Logger logger = Logger.getLogger(PatientWorkAreaJPanel.class);
    
    private JPanel userProcessContainer;
    private PatientDepartment organization;
    private Location enterprise;
    private UserAccount account;

    public PatientWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, PatientDepartment organization, Location enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.account = account;

        txtPatName.setText(account.getPerson().getName());
        txtID.setText(String.valueOf(account.getPerson().getPersonID()));

        txtPatName1.setText(account.getPerson().getName());
        txtID1.setText(String.valueOf(account.getPerson().getPersonID()));

        populateCompletedTable();
        populatePendingTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        PatientWorkArea = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtPatName1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtID1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        pendingTable = new javax.swing.JTable();
        btnNewAppointment = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        completedTable = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        txtID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtPatName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnNewAppointment1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(220, 226, 235));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));

        jTabbedPane1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        PatientWorkArea.setBackground(new java.awt.Color(220, 226, 235));
        PatientWorkArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        PatientWorkArea.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setText("Patient Name");

        txtPatName1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtPatName1.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setText("Patient ID");

        txtID1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtID1.setEnabled(false);

        pendingTable.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pendingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prescription ID", "Requested Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(pendingTable);

        btnNewAppointment.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnNewAppointment.setText("New Appointment");
        btnNewAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewAppointmentActionPerformed(evt);
            }
        });

        processJButton.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PatientWorkAreaLayout = new javax.swing.GroupLayout(PatientWorkArea);
        PatientWorkArea.setLayout(PatientWorkAreaLayout);
        PatientWorkAreaLayout.setHorizontalGroup(
            PatientWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientWorkAreaLayout.createSequentialGroup()
                .addContainerGap(154, Short.MAX_VALUE)
                .addGroup(PatientWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatientWorkAreaLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtPatName1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtID1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatientWorkAreaLayout.createSequentialGroup()
                        .addComponent(btnNewAppointment)
                        .addGap(307, 307, 307))
                    .addGroup(PatientWorkAreaLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processJButton)
                        .addGap(58, 58, 58))))
        );
        PatientWorkAreaLayout.setVerticalGroup(
            PatientWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientWorkAreaLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(PatientWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PatientWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtID1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PatientWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtPatName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(PatientWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PatientWorkAreaLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PatientWorkAreaLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(processJButton)))
                .addGap(18, 18, 18)
                .addComponent(btnNewAppointment)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Pending Prescriptions", PatientWorkArea);

        jPanel1.setBackground(new java.awt.Color(220, 226, 235));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));

        completedTable.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        completedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prescription ID", "Completed Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(completedTable);

        btnView.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        txtID.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtID.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setText("Patient Name");

        txtPatName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtPatName.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel2.setText("Patient ID");

        btnNewAppointment1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnNewAppointment1.setText("New Appointment");
        btnNewAppointment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewAppointment1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtPatName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNewAppointment1)
                        .addGap(67, 67, 67)))
                .addGap(135, 135, 135))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtPatName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(80, 80, 80)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNewAppointment1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Completed Prescriptions", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateCompletedTable() {
        DefaultTableModel model = (DefaultTableModel) completedTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
            if (request != null) {
                if (("Completed").equalsIgnoreCase(request.getStatus())) {
                    Object[] row = new Object[3];
                    row[0] = request.getPrescription().getId();
                    row[1] = request.getResolveDate();
                    row[2] = request.getStatus();
                    model.addRow(row);
                }
            }
        }
    }

    public void populatePendingTable() {
        DefaultTableModel model = (DefaultTableModel) pendingTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
            if (!("Completed").equalsIgnoreCase(request.getStatus())) {
                Object[] row = new Object[3];
                row[0] = request.getPrescription().getId();
                row[1] = request.getRequestDate();
                row[2] = request.getStatus();
                model.addRow(row);
            }
        }
    }

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = completedTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Information", JOptionPane.ERROR_MESSAGE);
        } else {

            Prescription prescription = enterprise.getPrescriptionDirectory().getPrescriptionList().get(selectedRow);
            ViewPatientPrescription viewPatientPrescription = new ViewPatientPrescription(userProcessContainer, prescription, organization);
            userProcessContainer.add("viewPatientPrescription", viewPatientPrescription);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnNewAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewAppointmentActionPerformed
        // TODO add your handling code here:
        DoctorWorkRequest request = new DoctorWorkRequest();
        request.setSender(account);
        Date date = Calendar.getInstance().getTime();
        request.setRequestDate(date);
        request.setStatus("Waiting for doctor's review.");

        Departments org = null;
        for (Departments organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof DoctorDepartment) {
                org = organization;
                System.out.println(organization);
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(request);
            account.getWorkQueue().getWorkRequestList().add(request);

            JOptionPane.showMessageDialog(null, "Request Sent to the Doctor");
            
            logger.info("Request for Prescription created by " + account);
        }

    }//GEN-LAST:event_btnNewAppointmentActionPerformed

    private void btnNewAppointment1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewAppointment1ActionPerformed
        // TODO add your handling code here:
        DoctorWorkRequest request = new DoctorWorkRequest();
        request.setSender(account);
        Date date = Calendar.getInstance().getTime();
        request.setRequestDate(date);
        request.setStatus("Waiting for doctor's review.");

        Departments org = null;
        for (Departments organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof DoctorDepartment) {
                org = organization;
                System.out.println(organization);
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(request);
            account.getWorkQueue().getWorkRequestList().add(request);

            JOptionPane.showMessageDialog(null, "Request Sent to the Doctor");
            logger.info("Request for Prescription created by " + account);
        }

    }//GEN-LAST:event_btnNewAppointment1ActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = pendingTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        //PatientWorkRequest request = (PatientWorkRequest) pendingTable.getValueAt(selectedRow, 0);
        DoctorWorkRequest request = (DoctorWorkRequest) account.getWorkQueue().getWorkRequestList().get(selectedRow);
        
        if(!(request.getStatus()).equalsIgnoreCase("Prescription completed by Pharmacist")){

        request.setStatus("Processing");

        ProcessPatientJPanel processPatientJPanel = new ProcessPatientJPanel(userProcessContainer, account, enterprise, (DoctorWorkRequest) request);
        userProcessContainer.add("processWorkRequestJPanel", processPatientJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_processJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PatientWorkArea;
    private javax.swing.JButton btnNewAppointment;
    private javax.swing.JButton btnNewAppointment1;
    private javax.swing.JButton btnView;
    private javax.swing.JTable completedTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable pendingTable;
    private javax.swing.JButton processJButton;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtID1;
    private javax.swing.JTextField txtPatName;
    private javax.swing.JTextField txtPatName1;
    // End of variables declaration//GEN-END:variables
}
